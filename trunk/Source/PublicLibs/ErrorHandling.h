/* ErrorHandling.h - Global Error Handling
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 09/28/2009
 * Last Modified    : 09/28/2009
 * 
 *      Deprecated. Don't use.
 * 
 */

#pragma once
#ifndef ym_ErrorHandling_H
#define ym_ErrorHandling_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Dependencies
#include "Settings.h"
#include "PublicLibs/CompilerSettings.h"
#include "PublicLibs/Types.h"
namespace ymp{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Headers
YM_NO_INLINE    void    ym_assertion_failure    (const char* type, const char* name, const char* msg);
YM_NO_INLINE    void    ym_exceeded_limit       (const char* type, const char* name, const char* msg);
YM_NO_INLINE    void    ym_computation_error    ();
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Assertion Checks
#ifdef YMC_ENABLE_PARAMETER_ASSERTIONS
#define ym_assert_parameters(test, name, msg) {  if (!(test)) ym_assertion_failure("Invalid Function Parameters:   ", name, msg);  }
#else
#define ym_assert_parameters(test, name, msg) {  if (!(test)) ym_assertion_failure("Invalid Function Parameters:   ", "", "");  }
#endif
#ifdef YMC_ENABLE_RESULT_ASSERTIONS
#define ym_assert_result(test, name, msg)     {  if (!(test)) ym_assertion_failure("Impossible Functional Result:   ", name, msg);  }
#else
#define ym_assert_result(test, name, msg)     {  if (!(test)) ym_assertion_failure("Impossible Functional Result:   ", "", "");  }
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Limit Checks
#ifndef YMC_DISABLE_LIMIT_CHECKS
#define ym_limit_architectural(test, name, msg)   {  if (!(test)) ym_exceeded_limit("Architectural Limit Exceeded: ", name, msg);  }
#else
#define ym_limit_architectural(test, name, msg)   {}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Pointer Alignment Checks
#ifdef YMC_ENABLE_ALIGNMENT_CHECKS
#define ym_assert_alignment(ptr, bytes, name)     {  if (((upL_t)ptr & (bytes - 1)) != 0) ym_assertion_failure("Invalid Data Alignment: ", name, "");  }
#else
#define ym_assert_alignment(ptr, bytes, name)     {}
#endif
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Errors
[[noreturn]] YM_NO_INLINE void ymo_error(const char* msg);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//  Error Correction
extern volatile uiL_t yms_fixed_errors;
void ym_computation_error();
void ymo_retry_success(upL_t retries);
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
